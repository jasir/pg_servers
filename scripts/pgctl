#!/bin/bash

# PostgreSQL Control Tool (pgctl)
# Spr√°va v√≠ce verz√≠ PostgreSQL p≈ôes Docker

PG_SERVERS_ROOT="$HOME/pg_servers"
ENV_FILE="$PG_SERVERS_ROOT/.env"
COMPOSE_FILE="$PG_SERVERS_ROOT/docker/docker-compose.yml"

# Naƒçten√≠ environment promƒõnn√Ωch
if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
fi

# Funkce pro instalaci PostgreSQL klient≈Ø
install_clients() {
    echo "üì¶ Instaluji PostgreSQL klienty pro v≈°echny podporovan√© verze..."

    # Seznam verz√≠ k instalaci
    local versions=("16" "15" "14" "13" "12")

    # Kontrola, zda jsme na Ubuntu/Debian syst√©mu
    if ! command -v apt-get >/dev/null 2>&1; then
        echo "‚ùå Tento skript vy≈æaduje apt-get (Ubuntu/Debian)"
        return 1
    fi

    # P≈ôid√°n√≠ PostgreSQL APT repozit√°≈ôe pro star≈°√≠ verze
    echo "üîÑ P≈ôid√°v√°m PostgreSQL APT repozit√°≈ô..."
    if ! grep -q "apt.postgresql.org" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
        echo "üì¶ P≈ôid√°v√°m PostgreSQL repozit√°≈ô..."
        sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'

        # P≈ôid√°n√≠ kl√≠ƒçe
        curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg

        echo "üîÑ Aktualizuji seznam bal√≠ƒçk≈Ø..."
        sudo apt-get update
    fi

    # Instalace postgresql-client-common
    echo "üì¶ Instaluji postgresql-client-common..."
    sudo apt-get install -y postgresql-client-common

    # Instalace klient≈Ø pro ka≈ædou verzi
    local installed=0
    for version in "${versions[@]}"; do
        echo "üì¶ Instaluji postgresql-client-$version..."
        if sudo apt-get install -y "postgresql-client-$version"; then
            echo "‚úÖ PostgreSQL client $version nainstalov√°n"
            installed=$((installed + 1))
        else
            echo "‚ö†Ô∏è  Nepoda≈ôilo se nainstalovat postgresql-client-$version"
        fi
    done

    echo ""
    if [ $installed -gt 0 ]; then
        echo "‚úÖ Instalace dokonƒçena ($installed verz√≠)"
        echo "üìã Nainstalovan√© verze:"
        list_installed_versions
    else
        echo "‚ùå Nepoda≈ôilo se nainstalovat ≈æ√°dn√© PostgreSQL klienty"
        return 1
    fi
}

# Funkce pro zobrazen√≠ nainstalovan√Ωch verz√≠
list_installed_versions() {
    echo "üîç Nainstalovan√© PostgreSQL klienty:"
    echo ""

    local found=false
    for dir in /usr/lib/postgresql/*; do
        if [ -d "$dir/bin" ] && [ -f "$dir/bin/psql" ]; then
            local version=$(basename "$dir")
            local psql_path="$dir/bin/psql"
            local psql_version=$($psql_path --version | head -1)
            echo "  ‚Ä¢ PostgreSQL $version: $psql_version"
            found=true
        fi
    done

    if [ "$found" = false ]; then
        echo "  ≈Ω√°dn√© PostgreSQL klienty nenalezeny"
        echo "  Spus≈•te: pgctl install"
    fi
}

# Funkce pro nastaven√≠ PATH pro specifickou verzi
set_pg_version() {
    local version="$1"

    if [ -z "$version" ]; then
        echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl use <verze>"
        echo "Dostupn√© verze: $(list_available_versions)"
        return 1
    fi

    local pg_path="/usr/lib/postgresql/$version/bin"

    if [ ! -d "$pg_path" ]; then
        echo "‚ùå PostgreSQL $version nen√≠ nainstalov√°n"
        echo "Spus≈•te: pgctl install"
        return 1
    fi

    # Odebr√°n√≠ v≈°ech PostgreSQL bin√°rek z PATH
    export PATH=$(echo "$PATH" | sed 's|:/usr/lib/postgresql/[^/]*/bin||g')

    # P≈ôid√°n√≠ po≈æadovan√© verze na zaƒç√°tek PATH
    export PATH="$pg_path:$PATH"

    echo "‚úÖ Nastavena PostgreSQL verze $version"
    echo "üìç PATH: $pg_path"
    echo "üîç Verze psql: $(psql --version | head -1)"
}

# Funkce pro z√≠sk√°n√≠ seznamu dostupn√Ωch verz√≠
list_available_versions() {
    local versions=""
    for dir in /usr/lib/postgresql/*; do
        if [ -d "$dir/bin" ]; then
            local version=$(basename "$dir")
            versions="$versions $version"
        fi
    done
    echo "$versions" | sed 's/^ *//'
}

# Funkce pro zobrazen√≠ aktu√°ln√≠ verze
show_current_version() {
    local psql_path=$(which psql 2>/dev/null)
    if [ -n "$psql_path" ]; then
        local version=$(psql --version | head -1)
        echo "üîç Aktu√°ln√≠ PostgreSQL klient: $version"
        echo "üìç Cesta: $psql_path"
    else
        echo "‚ùå PostgreSQL klient nen√≠ v PATH"
        echo "Spus≈•te: pgctl use <verze> nebo pgctl install"
    fi
}
show_help() {
    echo "PostgreSQL Control Tool (pgctl)"
    echo ""
    echo "Pou≈æit√≠:"
    echo "  pgctl start <verze>     - Spust√≠ PostgreSQL kontejner"
    echo "  pgctl stop <verze>      - Zastav√≠ PostgreSQL kontejner"
    echo "  pgctl restart <verze>   - Restartuje PostgreSQL kontejner"
    echo ""
    echo "  pgctl status            - Zobraz√≠ stav v≈°ech kontejner≈Ø"
    echo "  pgctl list              - Seznam dostupn√Ωch verz√≠"
    echo ""
    echo "  pgctl logs <verze>      - Zobraz√≠ logy kontejneru"
    echo "  pgctl up                - Kompletn√≠ nastaven√≠ (build + start)"
    echo ""
    echo "  pgctl install           - Nainstaluje PostgreSQL klienty"
    echo "  pgctl use <verze>       - Nastav√≠ PostgreSQL klienta"
    echo "  pgctl which             - Zobraz√≠ aktu√°ln√≠ verzi klienta"
    echo "  pgctl clients           - Seznam nainstalovan√Ωch klient≈Ø"
    echo ""
    echo "Dostupn√© verze: 9.5, 9.6, 12, 15, 16"
    echo ""
    echo "P≈ô√≠klady:"
    echo "  pgctl start 9.5         # Spust√≠ PostgreSQL 9.5 na portu 5432"
    echo "  pgctl install           # Nainstaluje v≈°echny PostgreSQL klienty"
    echo "  pgctl use 15            # Nastav√≠ PostgreSQL 15 klienta"
    echo "  pgctl which             # Zobraz√≠ aktu√°ln√≠ verzi"
    echo ""
    echo "  pgctl status            # Zobraz√≠ bƒõ≈æ√≠c√≠ kontejnery"
    echo "  pgctl up                # Prvn√≠ spu≈°tƒõn√≠ a build custom image"
}

# Funkce pro normalizaci verze
normalize_version() {
    case "$1" in
        9.5|95) echo "9.5" ;;
        9.6|96) echo "9.6" ;;
        12|12.*) echo "12" ;;
        15|15.*) echo "15" ;;
        16|16.*) echo "16" ;;
        *) echo "unknown" ;;
    esac
}

# Funkce pro z√≠sk√°n√≠ n√°zvu kontejneru
get_container_name() {
    local version=$(normalize_version "$1")
    case "$version" in
        9.5) echo "pg95" ;;
        9.6) echo "pg96" ;;
        12) echo "pg12" ;;
        15) echo "pg15" ;;
        16) echo "pg16" ;;
        *) echo "" ;;
    esac
}

# Funkce pro z√≠sk√°n√≠ portu
get_port() {
    local version=$(normalize_version "$1")
    case "$version" in
        9.5) echo "5432" ;;
        9.6) echo "5433" ;;
        12) echo "5434" ;;
        15) echo "5435" ;;
        16) echo "5437" ;;
        *) echo "" ;;
    esac
}

# Funkce pro start kontejneru
start_container() {
    local version=$(normalize_version "$1")
    local container=$(get_container_name "$version")
    local port=$(get_port "$version")

    if [ "$container" = "" ]; then
        echo "‚ùå Nezn√°m√° verze: $1"
        echo "Dostupn√© verze: 9.5, 9.6, 12, 15, 16"
        return 1
    fi

    echo "üöÄ Spou≈°t√≠m PostgreSQL $version na portu $port..."

    if ! docker compose -f "$COMPOSE_FILE" up -d "postgres${version//./}"; then
        echo "‚ùå Chyba p≈ôi spu≈°tƒõn√≠ kontejneru $container"
        return 1
    fi

    echo "‚úÖ PostgreSQL $version spu≈°tƒõn"
    echo "üì° P≈ôipojen√≠: psql -h localhost -p $port -U postgres"
}

# Funkce pro stop kontejneru
stop_container() {
    local version=$(normalize_version "$1")
    local container=$(get_container_name "$version")

    if [ "$container" = "" ]; then
        echo "‚ùå Nezn√°m√° verze: $1"
        return 1
    fi

    echo "üõë Zastavuji PostgreSQL $version..."

    if docker compose -f "$COMPOSE_FILE" stop "postgres${version//./}"; then
        echo "‚úÖ PostgreSQL $version zastaven"
    else
        echo "‚ùå Chyba p≈ôi zastavov√°n√≠ kontejneru $container"
        return 1
    fi
}

# Funkce pro restart kontejneru
restart_container() {
    local version=$(normalize_version "$1")
    echo "üîÑ Restartuji PostgreSQL $version..."
    stop_container "$version" && start_container "$version"
}




# Funkce pro zobrazen√≠ statusu
show_status() {
    echo "üìä Status PostgreSQL kontejner≈Ø:"
    echo ""

    for version in "9.5" "9.6" "12" "15" "16"; do
        local container=$(get_container_name "$version")
        local port=$(get_port "$version")
        local status=""

        if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "^$container"; then
            status="üü¢ Bƒõ≈æ√≠"
        elif docker ps -a --format "table {{.Names}}\t{{.Status}}" | grep -q "^$container"; then
            status="üî¥ Zastaven"
        else
            status="‚ö™ Nevytvo≈ôen"
        fi

        printf "  PostgreSQL %-3s (port %s): %s\n" "$version" "$port" "$status"
    done
}

# Funkce pro seznam verz√≠
list_versions() {
    echo "üìã Dostupn√© verze PostgreSQL:"
    echo ""
    echo "  ‚Ä¢ 9.5  (port 5432)"
    echo "  ‚Ä¢ 9.6  (port 5433)"
    echo "  ‚Ä¢ 12   (port 5434)"
    echo "  ‚Ä¢ 15   (port 5435)"
    echo "  ‚Ä¢ 16   (port 5437)"
    echo ""
    echo "Pou≈æit√≠: pgctl start <verze>"
}


# Funkce pro zobrazen√≠ log≈Ø
show_logs() {
    local version=$(normalize_version "$1")
    local container=$(get_container_name "$version")

    if [ "$container" = "" ]; then
        echo "‚ùå Nezn√°m√° verze: $1"
        return 1
    fi

    echo "üìú Logy pro PostgreSQL $version:"
    docker compose -f "$COMPOSE_FILE" logs -f "postgres${version//./}"
}

# Hlavn√≠ ƒç√°st skriptu
case "$1" in
    start)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl start <verze>"
            exit 1
        fi
        start_container "$2"
        ;;
    stop)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl stop <verze>"
            exit 1
        fi
        stop_container "$2"
        ;;
    restart)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl restart <verze>"
            exit 1
        fi
        restart_container "$2"
        ;;
    status)
        show_status
        ;;
    list)
        list_versions
        ;;
    logs)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl logs <verze>"
            exit 1
        fi
        show_logs "$2"
        ;;
    up)
        exec "$PG_SERVERS_ROOT/scripts/pgctl_up"
        ;;
    install)
        install_clients
        ;;
    use)
        set_pg_version "$2"
        ;;
    which)
        show_current_version
        ;;
    clients)
        list_installed_versions
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        echo "‚ùå Nezn√°m√Ω p≈ô√≠kaz: $1"
        echo ""
        show_help
        exit 1
        ;;
esac