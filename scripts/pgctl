#!/bin/bash

# PostgreSQL Control Tool (pgctl)
# Spr√°va v√≠ce verz√≠ PostgreSQL p≈ôes Docker

PG_SERVERS_ROOT="$HOME/pg_servers"
ENV_FILE="$PG_SERVERS_ROOT/.env"
CURRENT_FILE="$PG_SERVERS_ROOT/.current_version"
COMPOSE_FILE="$PG_SERVERS_ROOT/docker/docker-compose.yml"

# Naƒçten√≠ environment promƒõnn√Ωch
if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
fi

# Funkce pro zobrazen√≠ n√°povƒõdy
show_help() {
    echo "PostgreSQL Control Tool (pgctl)"
    echo ""
    echo "Pou≈æit√≠:"
    echo "  pgctl start <verze>     - Spust√≠ PostgreSQL kontejner"
    echo "  pgctl stop <verze>      - Zastav√≠ PostgreSQL kontejner"
    echo "  pgctl restart <verze>   - Restartuje PostgreSQL kontejner"
    echo "  pgctl use <verze>       - Nastav√≠ aktivn√≠ verzi pro CLI n√°stroje"
    echo "  pgctl status            - Zobraz√≠ stav v≈°ech kontejner≈Ø"
    echo "  pgctl list              - Seznam dostupn√Ωch verz√≠"
    echo "  pgctl current           - Aktu√°lnƒõ aktivn√≠ verze"
    echo "  pgctl logs <verze>      - Zobraz√≠ logy kontejneru"
    echo "  pgctl up                - Kompletn√≠ nastaven√≠ (build + start)"
    echo ""
    echo "Dostupn√© verze: 9.5, 9.6, 12, 15, 16"
    echo ""
    echo "P≈ô√≠klady:"
    echo "  pgctl start 9.5         # Spust√≠ PostgreSQL 9.5 na portu 5432"
    echo "  pgctl use 12            # Nastav√≠ verzi 12 jako aktivn√≠"
    echo "  pgctl status            # Zobraz√≠ bƒõ≈æ√≠c√≠ kontejnery"
    echo "  pgctl up                # Prvn√≠ spu≈°tƒõn√≠ a build custom image"
}

# Funkce pro normalizaci verze
normalize_version() {
    case "$1" in
        9.5|95) echo "9.5" ;;
        9.6|96) echo "9.6" ;;
        12|12.*) echo "12" ;;
        15|15.*) echo "15" ;;
        16|16.*) echo "16" ;;
        *) echo "unknown" ;;
    esac
}

# Funkce pro z√≠sk√°n√≠ n√°zvu kontejneru
get_container_name() {
    local version=$(normalize_version "$1")
    case "$version" in
        9.5) echo "pg95" ;;
        9.6) echo "pg96" ;;
        12) echo "pg12" ;;
        15) echo "pg15" ;;
        16) echo "pg16" ;;
        *) echo "" ;;
    esac
}

# Funkce pro z√≠sk√°n√≠ portu
get_port() {
    local version=$(normalize_version "$1")
    case "$version" in
        9.5) echo "5432" ;;
        9.6) echo "5433" ;;
        12) echo "5434" ;;
        15) echo "5435" ;;
        16) echo "5437" ;;
        *) echo "" ;;
    esac
}

# Funkce pro start kontejneru
start_container() {
    local version=$(normalize_version "$1")
    local container=$(get_container_name "$version")
    local port=$(get_port "$version")

    if [ "$container" = "" ]; then
        echo "‚ùå Nezn√°m√° verze: $1"
        echo "Dostupn√© verze: 9.5, 9.6, 12, 15, 16"
        return 1
    fi

    echo "üöÄ Spou≈°t√≠m PostgreSQL $version na portu $port..."

    if ! docker compose -f "$COMPOSE_FILE" up -d "postgres${version//./}"; then
        echo "‚ùå Chyba p≈ôi spu≈°tƒõn√≠ kontejneru $container"
        return 1
    fi

    echo "‚úÖ PostgreSQL $version spu≈°tƒõn"
    echo "üì° P≈ôipojen√≠: psql -h localhost -p $port -U postgres"
}

# Funkce pro stop kontejneru
stop_container() {
    local version=$(normalize_version "$1")
    local container=$(get_container_name "$version")

    if [ "$container" = "" ]; then
        echo "‚ùå Nezn√°m√° verze: $1"
        return 1
    fi

    echo "üõë Zastavuji PostgreSQL $version..."

    if docker compose -f "$COMPOSE_FILE" stop "postgres${version//./}"; then
        echo "‚úÖ PostgreSQL $version zastaven"
    else
        echo "‚ùå Chyba p≈ôi zastavov√°n√≠ kontejneru $container"
        return 1
    fi
}

# Funkce pro restart kontejneru
restart_container() {
    local version=$(normalize_version "$1")
    echo "üîÑ Restartuji PostgreSQL $version..."
    stop_container "$version" && start_container "$version"
}

# Funkce pro nastaven√≠ aktivn√≠ verze
use_version() {
    local version=$(normalize_version "$1")
    local port=$(get_port "$version")

    if [ "$version" = "unknown" ]; then
        echo "‚ùå Nezn√°m√° verze: $1"
        return 1
    fi

    echo "$version" > "$CURRENT_FILE"

    # Vytvo≈ôen√≠ wrapper≈Ø pro psql a pg_dump
    create_wrappers "$version" "$port"

    # Nastaven√≠ environment promƒõnn√Ωch pro aktu√°ln√≠ session
    export PGHOST=localhost
    export PGPORT="$port"
    export PGUSER=postgres
    export PGDATABASE=postgres

    echo "‚úÖ Aktivn√≠ verze nastavena na PostgreSQL $version"
    echo "üì° PGHOST=localhost, PGPORT=$port, PGUSER=postgres"
    echo ""
    echo "üîß Vytvo≈ôeny wrappery pro PostgreSQL n√°stroje:"
    echo "   ‚Ä¢ psql, pg_dump, pg_restore, pg_dumpall"
    echo "   ‚Ä¢ createdb, dropdb, createuser, dropuser"
    echo "   ‚Ä¢ vacuumdb, pg_isready, pg_config"
    echo ""
    echo "Pro trval√© nastaven√≠ p≈ôidej do ~/.bashrc:"
    echo "export PGHOST=localhost"
    echo "export PGPORT=$port"
    echo "export PGUSER=postgres"
}

# Funkce pro vytvo≈ôen√≠ wrapper≈Ø
create_wrappers() {
    local version="$1"
    local port="$2"

    # Seznam v≈°ech PostgreSQL n√°stroj≈Ø pro kter√© vytv√°≈ô√≠me wrappery
    local tools=(
        "psql"
        "pg_dump"
        "pg_restore"
        "pg_dumpall"
        "createdb"
        "dropdb"
        "createuser"
        "dropuser"
        "vacuumdb"
        "pg_isready"
        "pg_config"
    )

    # Vytvo≈ôen√≠ wrapperu pro ka≈æd√Ω n√°stroj
    for tool in "${tools[@]}"; do
        create_single_wrapper "$tool" "$version"
    done

    echo "‚úÖ Vytvo≈ôeny wrappery pro: ${tools[*]}"
}

# Funkce pro vytvo≈ôen√≠ jednoho wrapperu
create_single_wrapper() {
    local tool="$1"
    local version="$2"
    local wrapper_file="$PG_SERVERS_ROOT/wrappers/${tool}-wrapper"
    local symlink_file="$HOME/scripts-ai/$tool"

    # Vytvo≈ôen√≠ wrapperu
    cat > "$wrapper_file" << EOF
#!/bin/bash
# $tool wrapper pro PostgreSQL $version

# Naƒçten√≠ aktu√°ln√≠ verze
CURRENT_VERSION="\$(cat "$PG_SERVERS_ROOT/.current_version" 2>/dev/null || echo "$version")"

# Z√≠sk√°n√≠ portu podle verze
get_port() {
    case "\$1" in
        9.5) echo "5432" ;;
        9.6) echo "5433" ;;
        12) echo "5434" ;;
        15) echo "5435" ;;
        16) echo "5437" ;;
        *) echo "5432" ;;
    esac
}

PORT=\$(get_port "\$CURRENT_VERSION")

# Speci√°ln√≠ p≈ô√≠pady pro n√°stroje kter√© nepot≈ôebuj√≠ parametry p≈ôipojen√≠
case "$tool" in
    pg_config)
        docker exec -i "pg\${CURRENT_VERSION//./}" pg_config "\$@"
        ;;
    pg_isready)
        docker exec -i "pg\${CURRENT_VERSION//./}" pg_isready -h localhost -p "\$PORT" "\$@"
        ;;
    *)
        # Standardn√≠ n√°stroje s p≈ôipojen√≠m k datab√°zi
        docker exec -i "pg\${CURRENT_VERSION//./}" $tool -h localhost -p "\$PORT" -U postgres "\$@"
        ;;
esac
EOF

    # Nastaven√≠ opr√°vnƒõn√≠
    chmod +x "$wrapper_file"

    # Vytvo≈ôen√≠ symlinku (pokud neexistuje)
    if [ ! -L "$symlink_file" ]; then
        ln -sf "$wrapper_file" "$symlink_file"
    fi
}

# Funkce pro zobrazen√≠ statusu
show_status() {
    echo "üìä Status PostgreSQL kontejner≈Ø:"
    echo ""

    for version in "9.5" "9.6" "12" "15" "16"; do
        local container=$(get_container_name "$version")
        local port=$(get_port "$version")
        local status=""

        if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "^$container"; then
            status="üü¢ Bƒõ≈æ√≠"
        elif docker ps -a --format "table {{.Names}}\t{{.Status}}" | grep -q "^$container"; then
            status="üî¥ Zastaven"
        else
            status="‚ö™ Nevytvo≈ôen"
        fi

        printf "  PostgreSQL %-3s (port %s): %s\n" "$version" "$port" "$status"
    done

    echo ""
    echo "üéØ Aktivn√≠ verze pro CLI: $(cat "$CURRENT_FILE" 2>/dev/null || echo "nenastavena")"
}

# Funkce pro seznam verz√≠
list_versions() {
    echo "üìã Dostupn√© verze PostgreSQL:"
    echo ""
    echo "  ‚Ä¢ 9.5  (port 5432)"
    echo "  ‚Ä¢ 9.6  (port 5433)"
    echo "  ‚Ä¢ 12   (port 5434)"
    echo "  ‚Ä¢ 15   (port 5435)"
    echo "  ‚Ä¢ 16   (port 5437)"
    echo ""
    echo "Pou≈æit√≠: pgctl start <verze>"
}

# Funkce pro zobrazen√≠ aktu√°ln√≠ verze
show_current() {
    local current=$(cat "$CURRENT_FILE" 2>/dev/null || echo "")
    if [ "$current" = "" ]; then
        echo "‚ùå ≈Ω√°dn√° aktivn√≠ verze nen√≠ nastavena"
        echo "Pou≈æij: pgctl use <verze>"
    else
        local port=$(get_port "$current")
        echo "üéØ Aktivn√≠ verze: PostgreSQL $current"
        echo "üì° Port: $port"
    fi
}

# Funkce pro zobrazen√≠ log≈Ø
show_logs() {
    local version=$(normalize_version "$1")
    local container=$(get_container_name "$version")

    if [ "$container" = "" ]; then
        echo "‚ùå Nezn√°m√° verze: $1"
        return 1
    fi

    echo "üìú Logy pro PostgreSQL $version:"
    docker compose -f "$COMPOSE_FILE" logs -f "postgres${version//./}"
}

# Hlavn√≠ ƒç√°st skriptu
case "$1" in
    start)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl start <verze>"
            exit 1
        fi
        start_container "$2"
        ;;
    stop)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl stop <verze>"
            exit 1
        fi
        stop_container "$2"
        ;;
    restart)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl restart <verze>"
            exit 1
        fi
        restart_container "$2"
        ;;
    use)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl use <verze>"
            exit 1
        fi
        use_version "$2"
        ;;
    status)
        show_status
        ;;
    list)
        list_versions
        ;;
    current)
        show_current
        ;;
    logs)
        if [ -z "$2" ]; then
            echo "‚ùå Chyb√≠ verze. Pou≈æit√≠: pgctl logs <verze>"
            exit 1
        fi
        show_logs "$2"
        ;;
    up)
        exec "$PG_SERVERS_ROOT/scripts/pgctl_up"
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        show_help
        ;;
    *)
        echo "‚ùå Nezn√°m√Ω p≈ô√≠kaz: $1"
        echo ""
        show_help
        exit 1
        ;;
esac